<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NoOne&#39;s Blog</title>
    <link>https://aoxiangcao.github.io/index.xml</link>
    <description>Recent content on NoOne&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Mar 2017 20:11:29 +0800</lastBuildDate>
    <atom:link href="https://aoxiangcao.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>海量数据去重之simhash算法。</title>
      <link>https://aoxiangcao.github.io/posts/2017-3-24-simhash/</link>
      <pubDate>Fri, 24 Mar 2017 20:11:29 +0800</pubDate>
      
      <guid>https://aoxiangcao.github.io/posts/2017-3-24-simhash/</guid>
      <description>

&lt;h3 id=&#34;simhash算法之similarity&#34;&gt;SimHash算法之Similarity。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;前两天上英语课的时候，公众号推送了一篇SimHash算法的介绍，粗略看了一遍之后，又在网上找了些博客，整理在这里。&lt;/li&gt;
&lt;li&gt;SimHash,根据名称可以看出，是Similarity和Hash的结合，即使用hash算法来计算相似性的一种算法。&lt;/li&gt;
&lt;li&gt;我们知道，hash函数是将数据映射为一段hash值的函数，其目的在于使两个不同的数据的hash值尽可能的不同。无法用来比较两短数据的相似性的大小。&lt;/li&gt;
&lt;li&gt;传统的相似度计算算法如余弦相似度，欧式距离等算法在面对大数据量时，要计算两个数据的相似度大小，需要将待计算的数据和库中的所有数据进行一次比较，时间开销是非常大的。&lt;/li&gt;
&lt;li&gt;simhash算法的出现解决了大数据量下相似度计算的问题。其算法的核心如下

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分词&lt;/strong&gt;：将一段文章的进行分词，说道分词，其实又是一个很大的方向了，这里先不管了，假设将一段文字很容易的进行了分词，比如：今天天气很好，我要出去玩，假设分词为： ‘今天’，‘天气’，‘’好，‘我要’，‘出去’，‘玩’。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hash&lt;/strong&gt;:对分词的结果进行hash,得到各自的hash值， 假设，‘今天’：010101,‘天气’：110011, ‘玩’：000111。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加权&lt;/strong&gt;： 一段文章中不同的词有着不同的权重，最简单的可以根据词出现次数的多少来定义权重，假设上文中的‘今天’权重为1,‘天气’权重为2,‘玩’权重为3.对hash值进行加权，今天：-1 1 -1 1 -1 1, 天气：2 2 -2 -2 2 2.玩：-3 -3 -3 3 3 3.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合并&lt;/strong&gt;：将加完权的hash值合并得到结果： -2 ,0 -6 -4 4 6.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;降维&lt;/strong&gt;： 将大于0的记为1,其余为0,得到结果：0,0,0,0,1,1,这就是这段文字的hash值。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;通过上面的步骤，我们可以计算出不同文章的hash值，关于相似度的度量，我们使用汉明距离来计算，即两个hash值，相同位上0,1不同的个数。可以使用两段数据异或来计算。通常来说，一段长文本当汉明距离小于3时，我们认为这两段文本是相似的。这里也暴露了simhash算法的一个问题，即在处理短文本时，优势不明显。&lt;/li&gt;
&lt;li&gt;到这里，相似度是计算成功了，可是怎么处理大数据量的比较呢。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;simhash算法之hash&#34;&gt;Simhash算法之hash。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在java中，hash值是用64位的Long来处理的，根据上文中的结论，当汉明距离小于3时，我们认为文本是相似的，这时，我们将64位的hash值分为4段，则对两个相似的文本来说，必然有一段是完全相同的，于是根据hashMap的启发，我们将这样的64位hash值分为4段，以每一个16位的段为key,64位的hash值为value,形成一个hashMap.这样，以空间换时间，空间增大了4倍，（每个hash值要存储4份），&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储过程&lt;/strong&gt;：

&lt;ul&gt;
&lt;li&gt;以16位的一段为key,查找hash表，若对应位置上有数据，将64为的hash值插入到value链表的末端。&lt;/li&gt;
&lt;li&gt;若对应位置上没有数据，直接插入到链表中。&lt;/li&gt;
&lt;li&gt;将4段16位的key按上述方式存储。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查找&lt;/strong&gt;：

&lt;ul&gt;
&lt;li&gt;将64为hash切成4段，以每段为key,查找hash表，在value表中进行汉明距离的计算，直到找到符合条件的。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;计算下时间复杂度降低了多少：

&lt;ul&gt;
&lt;li&gt;在不是用hash的时候，假设有5000w条数据，则需要比较5000w次，使用了hash之后，需要查找5000w/2^16=763次，飞跃。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;在上边的分段中，是不是必须要分成4段呢，不是的，我们分成4段是在默认汉明距离为3则相似的前提下的，这是一个以空间换时间的做法。完全可以分成8段，16段，只是存储空间会相应增加。假设汉明距离为7为相似，则分成8段是最优的解。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lanceyan.com/tech/arch/simhash_hamming_distance_similarity2-html.html&#34;&gt;http://www.lanceyan.com/tech/arch/simhash_hamming_distance_similarity2-html.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/heiyeshuwu/article/details/44117473&#34;&gt;http://blog.csdn.net/heiyeshuwu/article/details/44117473&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>linux lvm 介绍及挂载</title>
      <link>https://aoxiangcao.github.io/posts/2017-3-18-lvm/</link>
      <pubDate>Sat, 18 Mar 2017 17:02:27 +0800</pubDate>
      
      <guid>https://aoxiangcao.github.io/posts/2017-3-18-lvm/</guid>
      <description>

&lt;h3 id=&#34;lvm-介绍&#34;&gt;LVM 介绍&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在前面安装pandoc的时候，想找一台纯净的机器来测试下，于是在openstack上申请了一台机器，结果空间实在太小，于是遇到了需要挂载LVM格式的空间的问题，下面先介绍下什么是LVM吧，现学现卖。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;LVM（Logical Volume Manager）逻辑卷管理，在传统的硬盘管理时，进行扩容等操作的时候很困难，这时候，发展了LVM技术，相当于在传统物理硬盘之上加了一层，这样的话，我们上层的应用在访问的时候，不是直接访问物理硬盘，而是访问这一逻辑层，这样的话，上层应用感知不到物理硬盘的变化，在我们增加硬盘进行扩容的时候就方便很多。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;逻辑卷的一些概念：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PV（physical Volume）物理卷： 真实的物理硬盘，或者硬盘上的分区。&lt;/li&gt;
&lt;li&gt;VG （Volume Group）逻辑卷组 ：建立在物理卷之上，一个逻辑卷组至少包含一个物理卷，在我们扩容的时候，就可以动态添加物理卷到逻辑卷组上，一个LVM中可以有一个或者多个逻辑卷组。&lt;/li&gt;
&lt;li&gt;LV （Logical Volume）逻辑卷，逻辑卷建立在逻辑卷组之上，逻辑卷组中未分配的空间可以用来建立新的逻辑卷。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一幅很形象的图表示这三者的关系。
&lt;img src=&#34;../imgs/pv_vg_lv.jpg&#34; alt=&#34;截图&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PE (physical Extent) 物理块，LVM中的最少存储单元，默认为4MB，一个LV最多含65534个PE，因此最大空间为256G，这个PE有点像hdfs中的block.可以通过调节PE的大小来调节LV的大小，但在LVM2中已经没有这个限制了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lvm的挂载&#34;&gt;LVM的挂载。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;LVM的挂载不想普通硬盘一样使用mount直接挂载，&lt;/li&gt;
&lt;li&gt;直接挂载时，如mount /dev/sdb2 /mnt 会报错&lt;br /&gt;
mount: unknown filesystem type &amp;lsquo;LVM2_member&amp;rsquo;&lt;/li&gt;
&lt;li&gt;这是因为LVM的挂载不应该使用LVM的名字挂载而应该使用其中的LV来挂载，步骤如下

&lt;ul&gt;
&lt;li&gt;sudo pvs &amp;ndash;显示所有的逻辑卷组vg&lt;/li&gt;
&lt;li&gt;sudo lvdisplay &lt;volume-group-name&gt; &amp;mdash;显示逻辑卷组中的逻辑卷lv,也就是后面我们要挂载的（上层应用直接感知到的正是lv）&lt;/li&gt;
&lt;li&gt;sudo mount &lt;volume-group-name&gt;/&lt;logical-volume-name&gt; /mnt完成挂载，可以使用 mount命令来查看挂载的情况。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ask.xmodulo.com/mount-lvm-partition-linux.html&#34;&gt;lvm mount &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/mchina/p/linux-centos-logical-volume-manager-lvm.html&#34;&gt;lvm 介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>使用Pandoc，转换markdown格式到pdf和html格式</title>
      <link>https://aoxiangcao.github.io/posts/2017-3-14/</link>
      <pubDate>Tue, 14 Mar 2017 16:51:29 +0800</pubDate>
      
      <guid>https://aoxiangcao.github.io/posts/2017-3-14/</guid>
      <description>

&lt;h3 id=&#34;pandoc-convert-markdown-to-pdf&#34;&gt;pandoc convert markdown to pdf&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在按照前一篇文章安装完pandoc和latex之后就可以进行markdown转pdf了，具体命令官网上有介绍就不在赘述，说一下其中的一些问题吧。还是说一下吧，
pandoc &amp;ndash;latex-engine=xelatex  &amp;ndash;template=../mytemplate.tex -fmarkdown-implicit_figures  {source} -o {destination}具体参数后面介绍。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;中文字体的支持问题&#34;&gt;中文字体的支持问题&lt;/h4&gt;

&lt;p&gt;pandoc默认是对中文字体不支持的，这里我们使用&amp;ndash;latex-engine=xelatex，使用xelatex来进行转换，&amp;ndash;template=mytemplate.tex,使用mytemplate.tex这个模板，模板里是latex的格式定义。
对于中文的支持，在mytemplate.tex加上&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% SUPPORT for Chinese  
\usepackage{fontspec}     % 允許設定字體
\usepackage{xeCJK}        % 分開設置中英文字型
\setCJKmainfont{SimSun}   % 設定中文字型
\setmainfont{SimSun}     % 設定英文字型
\setromanfont{SimSun}    % 字型
\setmonofont{SimSun}
\linespread{1.2}\selectfont   % 行距
\XeTeXlinebreaklocale &amp;quot;zh&amp;quot;    % 針對中文自動換行
\XeTeXlinebreakskip = 0pt plus 1pt % 字與字之間加入0pt至1pt的間距，確保左右對整齊
\parindent 0em        % 段落縮進
\setlength{\parskip}{20pt}    % 段落之間的距離
\ifxetex
\usepackage{xltxtra,xunicode}
\fi
\defaultfontfeatures{Mapping=tex-text,Scale=MatchLowercase}
\newcommand{\euro}{€}
$if(mainfont)$
\setmainfont{$mainfont$}
$endif$
$if(sansfont)$
\setsansfont{$sansfont$}
$endif$
$if(monofont)$
\setmonofont{$monofont$}
$endif$
$if(mathfont)$
\setmathfont{$mathfont$}
 $endif$
 \fi
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;其中，Simsun是我本机安装的中文字体，可以根据自己机器上安装的字体来相应的更改。&lt;/li&gt;
&lt;li&gt;查看本机安装的中文字体的命令为fc-list -f &amp;ldquo;%{family}\n&amp;rdquo;  :lang=zh 。如果本机没有安装中文字体，可以在网上任意下载一个中文字体。安装方式很简单，如下：&lt;/li&gt;
&lt;li&gt;在/usr/share/fonts/下建立文件夹如chinese,&lt;/li&gt;
&lt;li&gt;将下载的字体拷贝到文件夹下。&lt;/li&gt;
&lt;li&gt;建立字体缓存，命令如下：

&lt;ul&gt;
&lt;li&gt;cd /usr/share/fonts/chinese/&lt;/li&gt;
&lt;li&gt;mkfontscale&lt;/li&gt;
&lt;li&gt;mkfontdir&lt;/li&gt;
&lt;li&gt;fc-cache -fv&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;再次执行fc-list -f &amp;ldquo;%{family}\n&amp;rdquo;  :lang=zh 即可看到安装的字体。&lt;/p&gt;

&lt;h4 id=&#34;图片位置乱序的问题&#34;&gt;图片位置乱序的问题。&lt;/h4&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;发现在生成pdf的时候，添加多张图片会产生顺序错乱的问题，google得知，在mytemplate中添加&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;% Overwrite \begin{figure}[htbp] with \begin{figure}[H]  //图片的位置问题
\usepackage{float}
\let\origfigure=\figure
\let\endorigfigure=\endfigure
\renewenvironment{figure}[1][]{%
  \origfigure[H]
  }{%
    \endorigfigure
	}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;都是一些latex的语法吧，也不想去深入了解了，加入上面的代码即可解决图片的乱序问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;页面的边距问题&#34;&gt;页面的边距问题。&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;生成的pdf发现页面的边距很不合适，google得知，在mytemplate中加入&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;\usepackage[top=0.5in,inner=0.5in,outer=0.5in,bottom=1in,headheight=3ex,headsep=2ex]{geometry}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用geometry来调整边距。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;图片标注问题&#34;&gt;图片标注问题&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;markdown格式的图片引用转换到pdf或者html等其他格式，会自动给加上标注。&lt;/li&gt;
&lt;li&gt;如&amp;rdquo; &lt;a href=&#34;https://aoxiangcao.github.io/url/images&#34;&gt;image caption&lt;/a&gt; &amp;ldquo;则会在图片的下方标注为image caption 如果不想要这个标注，可以

&lt;ul&gt;
&lt;li&gt;在图片引用的这一行加入别的内容，如 ‘\’.&lt;/li&gt;
&lt;li&gt;可以在转换的时候加上-fmarkdown-implicit_figures参数。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;pandoc-markdown-to-html&#34;&gt;pandoc markdown to html，&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;这个好像没什么太多的坑，我的转换命令如下:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;pandoc -s -S --toc -c ../pandoc.css -A ../footer.html --latex-engine=xelatex -fmarkdown-implicit_figures  {source}  -o {destination}  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;其中，&amp;ndash;toc,是生成toc目录，可以去掉这个参数，选择不生成目录，其实我感觉生成的目录确实挺丑的。pandoc.css是生成的html所引用的css,可以根据自己的要求更改。 foot.html是在生成的html下加入footer.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;好啦，最近pandoc格式转换过程中踩的坑和一些注意的地方大致就这些了。&lt;/p&gt;

&lt;h4 id=&#34;附&#34;&gt;附&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://omssnbyrh.bkt.clouddn.com/pandoc.css&#34;&gt;pandoc.css&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://omssnbyrh.bkt.clouddn.com/mytemplate.tex&#34;&gt;mytemplate.tex&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://omssnbyrh.bkt.clouddn.com/simsun.ttc&#34;&gt;simsun中文包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/52linux/archive/2012/03/07/2383422.html&#34;&gt;http://www.cnblogs.com/52linux/archive/2012/03/07/2383422.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;别的参考找不到了，非常抱歉。。。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>pandoc 及texlive安装</title>
      <link>https://aoxiangcao.github.io/posts/2017-3-13-pandoc/</link>
      <pubDate>Mon, 13 Mar 2017 20:39:45 +0800</pubDate>
      
      <guid>https://aoxiangcao.github.io/posts/2017-3-13-pandoc/</guid>
      <description>

&lt;h3 id=&#34;pandoc安装&#34;&gt;pandoc安装&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;最近在开发中使用到pandoc这个工具，关于这个工具的介绍就不再多说了.一个非常强大的格式转换工具，几乎你能想到的格式转换都能给你实现。在使用pandoc的过程中，遇到了很多问题。从安装讲起吧。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在ubuntu下的安装其实并没有什么问题，apt-get install pandoc就可以了，然而在将项目迁移到centos6.5环境下时却遇到了一些问题。在yum源里并没有pandoc,于是按照官方文档中的方法安装deb包。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在centos下使用alien来安装deb包。命令如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;ar p $DEB data.tar.gz | sudo tar xvz --strip-components 2 -C /usr/local


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中$DEB是你的deb包的位置。
* 这样安装完成后，执行pandoc命令，报错&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pandoc: error while loading shared libraries: libgmp.so.10: cannot open shared object file: No such file or directory，

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这是系统中没找到这个共享的lib库，要么是系统中压根没有这个文件，要么是文件位置没在$PATH里面。使用find 或者which 或者locate查看一下，在我这里，由于是新装的系统，所以确实是没有这个文件的，没办法，装吧。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;由于之后工程可能会在没有网络的环境中部署，所以默认离线安装，不得不说各种依赖真是让人头大。经过一系列的依赖解决，最终在centos6.5环境下安装gmp511-5.1.1-7.sdl6.x86_64.rpm,这个又需要environment-modules-3.2.10-3.el6.x86_64.rpm而这个又需要tcl-8.5.7-6.el6.x86_64，这些依赖都安装成功后，发现还是报libgmp.so.10找不到的错误。所以那就是第二个原因了，没在PATH中。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将文件位置添加到PATH中后，这下总可以了吧，运行试一下，卧槽，还是不行。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;原来XXX.so这种动态链接库和其他的文件还不一样，这里要介绍一个ldconfig命令，也就是用来搜索这些动态链接库的，他默认只搜索/lib/和/usr/lib以及/etc/ld.so.conf里所列的目录下面的库文件。而我所安装的gmp库文件刚好不在里面，于是，在/etc/ld.so.conf里添加gmp的路径。然后执行ldconfig使改动生效，这时候，执行pandoc命令，发现pandoc终于是安装成功了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;texlive-安装&#34;&gt;texlive 安装&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;pandoc 在转换成pdf格式时，需要使用latex,因为从markdown转pdf,其实是先转换到.tex,然后再进行转换的，于是安装texlive.&lt;/li&gt;
&lt;li&gt;从yum源中直接安装的texlive版本太旧，07版的，这里，选择离线安装texlive2016版.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/texlive2016.iso&#34;&gt;华中科大镜像&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;首先挂载镜像，

&lt;ul&gt;
&lt;li&gt;mount texlive2016.iso /mnt/&lt;/li&gt;
&lt;li&gt;cd /mnt&lt;/li&gt;
&lt;li&gt;./install-tl&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;输入I，开始安装，安装成功之后，添加环境变量&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;export PATH=${PATH}:/usr/local/texlive/2016/bin/x86_64-linux&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;卸载镜像&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cd&lt;/li&gt;
&lt;li&gt;umount /mnt/&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;至此texlive安装完成。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linuxidc.com/Linux/2016-08/133914.htm&#34;&gt;http://www.linuxidc.com/Linux/2016-08/133914.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Postgres的一些问题</title>
      <link>https://aoxiangcao.github.io/posts/2017-1-25/</link>
      <pubDate>Wed, 25 Jan 2017 16:09:28 +0800</pubDate>
      
      <guid>https://aoxiangcao.github.io/posts/2017-1-25/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;postgres的很多命令都和mysql不一样，一段时间不用就忘了，记录在这里，以后留着查看吧。&lt;/li&gt;
&lt;li&gt;\l list all databases;&lt;/li&gt;
&lt;li&gt;\c &lt;database name&gt; connection to the database.&lt;/li&gt;
&lt;li&gt;\dt list all table in databases;&lt;/li&gt;
&lt;li&gt;postgres的数据备份，postgres的数据部分和恢复，可以用pg_dump和psql。
也可以直接在pgadmin里运行这样的语句。

&lt;ul&gt;
&lt;li&gt;备份 ： copy &amp;lsquo;table name&amp;rsquo; to &amp;lsquo;filepath&amp;rsquo;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;恢复 ： copy &amp;lsquo;table name&amp;rsquo;  from &amp;lsquo;filepath&amp;rsquo;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;这里需要注意的是，会有写入权限的问题，所以，找一个能写入的路径吧，一般/tmp文件夹是777的，可以暂存。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>contact me</title>
      <link>https://aoxiangcao.github.io/contact/</link>
      <pubDate>Wed, 25 Jan 2017 15:06:23 +0800</pubDate>
      
      <guid>https://aoxiangcao.github.io/contact/</guid>
      <description></description>
    </item>
    
    <item>
      <title>HUGO搭建个人博客，并托管到github</title>
      <link>https://aoxiangcao.github.io/posts/firstPage/</link>
      <pubDate>Tue, 24 Jan 2017 21:52:47 +0800</pubDate>
      
      <guid>https://aoxiangcao.github.io/posts/firstPage/</guid>
      <description>

&lt;h2 id=&#34;hugo建站托管到github&#34;&gt;HUGO建站托管到github&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;断断续续的弄了一下午加一晚上算是弄好了，按照&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;这篇博客&lt;/a&gt;的内容大致可以走通，就记录一下安装过程中遇到的问题吧。&lt;/li&gt;
&lt;li&gt;下载的时候就很坑，可能是网络不行吧，deb的包死活下不下来，最后选择了较老版本的deb安装了hugo.&lt;/li&gt;
&lt;li&gt;下载完主题后，发现本地可以显示，但public下面却没有生成该有的静态页面。后来发现是没有加&amp;ndash;buildDrafts,这是因为，在新建的md文件时，有这样一行 ‘draft = true’也就是说，这个md是作为草稿的。将md文件里的draft改为false后，不加&amp;ndash;buildDrafts参数也是可以的。&lt;/li&gt;
&lt;li&gt;在托管到github时，发现css文件被浏览器block了，原因是mixed content, 查了一下说是https里有http的内容，浏览器认为是不安全的，所以给你block了，经过排查发现是baseURL里给写成http了，应该是https的。至此，结合上文中的博客内容，托管到github已成功。&lt;/li&gt;
&lt;li&gt;添加评论系统时，hugo建议的是disqus，但这个时不时被墙，国内访问速度太慢了，所以改成了多说。注册多说不必多说，er&amp;hellip;有点拗口。注册完之后，将disqus下的代码复制，将layout/partial/disqus.html里面的内容替换掉就行了。同时将data-thread-key=&amp;ldquo;{{ .Permalink }}&amp;ldquo;这样设置，用每篇文章的url来做唯一标识，但官方文档中不推荐这样做，目前还没发现问题，发现问题的时候再说吧。&lt;/li&gt;
&lt;li&gt;disqus的部分截图如下：
&lt;img src=&#34;../imgs/duoshuo1.png&#34; alt=&#34;截图&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>